@startuml

<style>
    legend {
        FontName Fira Mono
    }
    note {
        FontName Fira Mono
    }
</style>


legend top left
    from datetime import datetime as dt

    pathlike = str | Path
    ParamRange = tuple[float, float]
    KindActions = dict[Kind, Sequence[Callable]]
end legend


hide enum empty members
enum Matureness {
    CUB
    YOUNG
    ADULT
    ELDER
}
enum Kind {
    CAT
    DOG
    FOX
    BEAR
    SNAKE
    LIZARD
    TURTLE
    ...
}


hide abstract empty members
abstract class dict


together {
    class KindParameters {
        +title: str
        +maturation: tuple
        +cub: Ranges
        +young: Ranges
        +adult: Ranges
        +elder: Ranges
        __init__()
        +age_ranges() -> Ranges
    }
    class Creature {
        +kind: KindParameters
        +name: str
        +birthdate: dt
        +body: Body
        +mind: Mind
        ..properties..
        +age: int
        +state: State
        __
        -tick_changes() -> dict
        +apply_tick_changes()
        +feed()
        +play()
        +talk()
        +clean()
    }
}
'Matureness .down.> KindParameters
KindParameters .down.> Matureness
KindParameters *-- "сильная" Ranges
Creature <|-- CreatureActions
Creature::kind o-left- KindParameters
CreatureFactory o-- KindParameters
'(KindParameters, Ranges) . Matureness
'Matureness . (KindParameters, Ranges)
'KindParameters -right-o Creature::kind
'hide dummy
'KindParameters -down- dummy
'dummy - Matureness


class CreatureActions {
    +{static}kind_actions: KindActions
    +get_fried()
    +seek_for_honey()
    +be_a_cat()
    +be_a_naughty_cat()
    {method}...
}


'note as annotation
'    KindActions = dict[Kind, Sequence[Callable]]
'end note
'CreatureActions::kind_actions .. annotation


'class StatesCalculator {
'    +last: CreatureFactory
'    -revive_body() -> Body
'    -revive_mind() -> Mind
'    +revive_creature() -> Creature
'    {method}<i>?? новорождённое существо ??</i>
'}
'StatesCalculator::last o-- CreatureFactory
'StatesCalculator --> Creature
'StatesCalculator <.. KindParameters


class Body {
    +health: int
    +stamina: int
    +hunger: int
    +thirst: int
    +intestine: int
}
Body --o Creature::body


class Mind {
    #{static}patterns: DictOfRanges
    +joy: int
    +activity: float
    +anger: int
    +anxiety: float
    ..properties..
    +pattern
    __
'    +tick_changes(\n\tparameters: dict\n\t\t\t) -> dict
}
Mind --o Creature::mind
Mind o-- DictOfRanges
'DictOfRanges --o Mind::patterns


class State {
    +timestamp: dt
    +health: int
    +stamina: int
    +hunger: int
    +thirst: int
    +joy: int
    +activity: float
    +anger: int
    +anxiety: float
'    +pattern
    +to_dict()
}
'Creature::state --> State
State <-- Creature


hide DictOfRanges empty fields
dict <|-- DictOfRanges
class DictOfRanges {
    __getitem__()
}


hide Ranges empty methods
class Ranges {
    +health: DictOfRanges
    +stamina: DictOfRanges
    +hunger: DictOfRanges
    +thirst: DictOfRanges
    +intestine: DictOfRanges
    +{field}joy: ParamRange = (0, 100)
    +joy_coeff: float
    +activity: ParamRange
    +{field}anger: ParamRange = (0, 100)
    +anger_coeff: float
    +anxiety: ParamRange
    __iter__()
}
Ranges o-- DictOfRanges


class CreatureFactory {
    #parameters: KindParameters
    +name: str
    +birthdate: dt
    +last_state: State
    ..properties..
    +kind <-> Kind
    +creature_data <-> dict
    __
    __init__()
'    __bool__()
'    -revive_body() -> Body
'    -revive_mind() -> Mind
    +revive_creature() -> Creature
'    -new_body() -> Body
'    -new_mind() -> Mind
    +new_creature() -> Creature
}
Kind -left-o CreatureFactory
CreatureFactory o-- State
CreatureFactory --> Creature


class PersistenceManager {
    +{static}default_ranges_path: pathlike
    +{static}default_states_path: pathlike
    +{static}read_ranges() -> KindParameters
    +{static}read_states() -> dict
    +{static}write_states()
}
PersistenceManager --> KindParameters

'PersistenceManager -right-> CreatureFactory
'(PersistenceManager, CreatureFactory) .. State

PersistenceManager <-right- CreatureFactory
(PersistenceManager, CreatureFactory) .. KindParameters


@enduml