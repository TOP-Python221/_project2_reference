@startuml

<style>
    legend {
        FontName Fira Mono
    }
    note {
        FontName Fira Mono
    }
</style>


legend top left
    from datetime import datetime as dt

    ParamRanges = tuple[tuple[int, int], ...]
end legend


hide enum empty members

enum Kind {
    CAT
    DOG
    FOX
    BEAR
    SNAKE
    LIZARD
    TURTLE
    ...
}


class Creature {
    +kind: KindParameters
    +name: str
    +birthdate: dt
    +body: Body
    +mind: Mind
    ..properties..
    +age
    __
    +apply_tick_changes()
    +feed()
    +play()
    +talk()
}
Creature <|-- CreatureActions
Creature::kind o-- KindParameters


class CreatureActions {
    +{static}kind_actions: KindActions
    +get_fried()
    +seek_for_honey()
    +be_a_cat()
    +be_a_naughty_cat()
    {method}...
}
note as annotation
    KindActions = dict[Kind, tuple[method]]
end note
CreatureActions::kind_actions .. annotation


class StatesCalculator {
    +last: StatesManager
    -revive_body() -> Body
    -revive_mind() -> Mind
    +revive_creature() -> Creature
}
StatesCalculator::last o-- StatesManager
StatesCalculator --> Creature
StatesCalculator <.. KindParameters


class Body {
    +health: int
    +stamina: int
    +hunger: int
    +thirst: int
    +tick_changes(\n\tparameters: dict\n\t\t\t) -> dict
}
Body --o Creature::body


class Mind {
    #{static}patterns: dict
    +joy: int
    +anger: int
    ..properties..
    +pattern
    __
    +tick_changes(\n\tparameters: dict\n\t\t\t) -> dict
}
Mind --o Creature::mind


class BodyState {
    +timestamp: dt
    +health: int
    +stamina: int
    +hunger: int
    +thirst: int
    +to_dict()
}


class MindState {
    +timestamp: dt
    +joy: int
    +anger: int
    +pattern
    +to_dict()
}


class StatesManager {
    +kind: Kind
    +name: str
    +birthdate: dt
    +body_history: list[BodyState]
    +mind_last: MindState
    +to_dict()
}
StatesManager::kind o-- Kind
StatesManager::mind_last o-- MindState
StatesManager::body_history o-- BodyState


class KindParameters {
    +title: str
    +maturity: tuple
    +egg
    +cub
    +young
    +adult
    +elder
    +age_ranges()
}



class PersistenceManager {
    +{static}default_ranges_path: str | Path
    +{static}default_states_path: str | Path
    +{static}read_ranges() -> KindParameters
    +{static}read_states() -> StatesManager
    +{static}write_states()
}
PersistenceManager --> StatesManager
PersistenceManager --> KindParameters


@enduml